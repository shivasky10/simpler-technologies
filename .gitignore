# Main Project Gitignore - Covers All 3 Tasks
# =============================================

# Dependencies (for all tasks)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

# Production builds (for all tasks)
build/
dist/
out/

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage
.grunt

# Bower dependency directory
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons
build/Release

# Dependency directories
jspm_packages/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache
.cache
.parcel-cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
public

# Vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# React specific (for all React tasks)
# See https://create-react-app.dev/docs/deployment/ for more information.

# Create React App
# The build folder will be generated by create-react-app
# You can set the NODE_ENV=production environment variable on your machine
# to avoid the use of the `react-scripts build` command, if you like.
# You can also delete the `build` folder in your project directory.

# Testing
# See https://facebook.github.io/create-react-app/docs/running-tests for more information.

# Production
# The build folder will be generated by create-react-app
# You can set the NODE_ENV=production environment variable on your machine
# to avoid the use of the `react-scripts build` command, if you like.
# You can also delete the `build` folder in your project directory.

# Misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

# Logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# IDE and Editor files
.vscode/
.idea/
*.swp
*.swo
*~

# OS generated files
Thumbs.db
ehthumbs.db
Desktop.ini

# Temporary files
*.tmp
*.temp
.cache/

# Local environment files
.env.local
.env.development.local
.env.test.local
.env.production.local

# Package manager lock files (uncomment if you want to ignore them)
# package-lock.json
# yarn.lock
# pnpm-lock.yaml

# Optional: Ignore specific development files
.eslintcache
.stylelintcache
*.log

# Task-specific ignores
# =====================

# Task 1: Sign-Up/Sign-In Form
task1/build/
task1/node_modules/
task1/.env*

# Task 2: Navigation Bar
task2/build/
task2/node_modules/
task2/.env*

# Task 3: UserCard Component
task3/build/
task3/node_modules/
task3/.env*

# Common development files across all tasks
*.log
*.pid
*.seed
*.pid.lock

# OS specific files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Windows specific
*.lnk

# Linux specific
*~

# Editor specific
.vscode/
.idea/
*.swp
*.swo
*~

# Backup files
*.bak
*.backup
*.old
*.orig

# Temporary files
*.tmp
*.temp
.tmp/
.temp/

# Cache directories
.cache/
.parcel-cache/
.next/
.nuxt/
dist/

# Environment files
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Dependency directories
node_modules/
jspm_packages/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# parcel-bundler cache
.cache
.parcel-cache

# Next.js build output
.next

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
public

# Vuepress build output
.vuepress/dist

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*

# React specific
# See https://create-react-app.dev/docs/deployment/ for more information.

# Create React App
# The build folder will be generated by create-react-app
# You can set the NODE_ENV=production environment variable on your machine
# to avoid the use of the `react-scripts build` command, if you like.
# You can also delete the `build` folder in your project directory.

# Testing
# See https://facebook.github.io/create-react-app/docs/running-tests for more information.

# Production
# The build folder will be generated by create-react-app
# You can set the NODE_ENV=production environment variable on your machine
# to avoid the use of the `react-scripts build` command, if you like.
# You can also delete the `build` folder in your project directory.

# Misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

# Logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# IDE and Editor files
.vscode/
.idea/
*.swp
*.swo
*~

# OS generated files
Thumbs.db
ehthumbs.db
Desktop.ini

# Temporary files
*.tmp
*.temp
.cache/

# Local environment files
.env.local
.env.development.local
.env.test.local
.env.production.local

# Package manager lock files (uncomment if you want to ignore them)
# package-lock.json
# yarn.lock
# pnpm-lock.yaml

# Optional: Ignore specific development files
.eslintcache
.stylelintcache
*.log
